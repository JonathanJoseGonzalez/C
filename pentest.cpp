#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <sys/stat.h>
#include <string.h>
#include <unistd.h>
#include <regex>

using namespace std;

// Função para rodar comandos no terminal
void run_command(const char* command, const char* output_file = nullptr) {
    if (output_file) {
        string cmd = string(command) + " >> " + output_file + " 2>&1";
        system(cmd.c_str());
    } else {
        system(command);
    }
}

// Função para verificar e instalar ferramentas
void check_and_install_tool(const char* tool, const char* install_command) {
    string check_command = string("which ") + tool + " > /dev/null 2>&1";
    if (system(check_command.c_str()) != 0) {
        cout << "Ferramenta " << tool << " não encontrada. Instalando..." << endl;
        run_command(install_command);
    } else {
        cout << "Ferramenta " << tool << " já está instalada." << endl;
    }
}

// Função para limpar caracteres não imprimíveis ou especiais
void clean_file(const char* file_path) {
    ifstream file(file_path);
    string content((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());
    file.close();

    // Remove caracteres de controle usando regex (não imprimíveis, como caracteres de escape)
    content = regex_replace(content, regex(R"([^\x20-\x7E\n\r\t])"), "");

    // Reescrever o arquivo com conteúdo limpo
    ofstream cleaned_file(file_path);
    cleaned_file << content;
    cleaned_file.close();
}

int main() {
    // Verificar e instalar ferramentas necessárias
    check_and_install_tool("chkrootkit", "sudo apt update && sudo apt install chkrootkit -y");
    check_and_install_tool("rkhunter", "sudo apt update && sudo apt install rkhunter -y && sudo rkhunter --update");
    check_and_install_tool("nmap", "sudo apt update && sudo apt install nmap -y");
    check_and_install_tool("nikto", "sudo apt update && sudo apt install nikto -y");
    check_and_install_tool("searchsploit", "sudo apt update && sudo apt install exploitdb -y && searchsploit --update");
    check_and_install_tool("sslscan", "sudo apt update && sudo apt install sslscan -y");
    check_and_install_tool("netcat", "sudo apt update && sudo apt install netcat -y");

    // Diretório de saída
    const char* output_folder = "/mnt/c/Users/Usuario/Downloads/pentest_results";
    mkdir(output_folder, 0755);

    // Gerar timestamp para os arquivos
    time_t now = time(0);
    tm *ltm = localtime(&now);

    char timestamp[20];
    snprintf(timestamp, sizeof(timestamp), "%04d-%02d-%02d_%02d-%02d",
             1900 + ltm->tm_year, 1 + ltm->tm_mon, ltm->tm_mday,
             ltm->tm_hour, ltm->tm_min);

    // Arquivo de relatório Markdown
    string report_file_md = string(output_folder) + "/pentest_report_" + timestamp + ".md";
    ofstream report(report_file_md);

    // Cabeçalho do relatório Markdown
    report << "---\n";
    report << "title: \"Relatório de Pentest\"\n";
    report << "author: \"Script Automático\"\n";
    report << "date: \"" << 1900 + ltm->tm_year << "-" << 1 + ltm->tm_mon << "-" << ltm->tm_mday << "\"\n";
    report << "output: pdf_document\n";
    report << "---\n\n";

    report << "# Relatório de Pentest\n";
    report << "Gerado em: " << timestamp << "\n\n";

    // Secção 1: Informações do Sistema
    report << "## 1. Informações do Sistema\n";
    report << "### Sistema Operacional\n";
    report.close();
    run_command("uname -a", report_file_md.c_str());
    run_command("cat /etc/os-release", report_file_md.c_str());

    // Secção 2: Segurança Local
    report.open(report_file_md, ios::app);
    report << "\n## 2. Segurança Local\n";
    report << "### Verificação de Rootkits\n";
    report.close();
    run_command("chkrootkit", report_file_md.c_str());
    run_command("rkhunter --check", report_file_md.c_str());

    // Secção 3: Segurança de Rede
    report.open(report_file_md, ios::app);
    report << "\n## 3. Segurança de Rede\n";
    report << "### Varredura de Portas (Nmap)\n";
    report.close();
    run_command("nmap -sS -sV -O localhost", report_file_md.c_str());

    report.open(report_file_md, ios::app);
    report << "\n### Varredura de Serviços Web (Nikto)\n";
    report.close();
    run_command("nikto -h localhost", report_file_md.c_str());

    // Secção 4: Vulnerabilidades Conhecidas
    report.open(report_file_md, ios::app);
    report << "\n## 4. Vulnerabilidades Conhecidas\n";
    report.close();
    run_command("searchsploit --offline", report_file_md.c_str());

    // Secção 5: SSL e Configurações de Rede
    report.open(report_file_md, ios::app);
    report << "\n## 5. Configurações SSL e Rede\n";
    report.close();
    run_command("sslscan localhost", report_file_md.c_str());
    run_command("netcat -z -v localhost 1-65535", report_file_md.c_str());

    // Limpeza de caracteres não imprimíveis
    clean_file(report_file_md.c_str());

    // Gerar PDF com pandoc
    string report_file_pdf = string(output_folder) + "/pentest_report_" + timestamp + ".pdf";
    string pandoc_command = "pandoc " + report_file_md + " -o " + report_file_pdf;
    int pandoc_status = system(pandoc_command.c_str());

    // Mensagem final
    if (pandoc_status == 0) {
        cout << "Relatório completo gerado em PDF: " << report_file_pdf << endl;
    } else {
        cerr << "Erro ao gerar o relatório em PDF. Verifique se o Pandoc e o LaTeX estão instalados." << endl;
    }

    return 0;
}
